// Generated by gencpp from file vision_info_msg/vision_info_msg.msg
// DO NOT EDIT!


#ifndef VISION_INFO_MSG_MESSAGE_VISION_INFO_MSG_H
#define VISION_INFO_MSG_MESSAGE_VISION_INFO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_info_msg
{
template <class ContainerAllocator>
struct vision_info_msg_
{
  typedef vision_info_msg_<ContainerAllocator> Type;

  vision_info_msg_()
    : light(false)
    , sign(0)
    , blocked(false)
    , pos(0)
    , shift(0)  {
    }
  vision_info_msg_(const ContainerAllocator& _alloc)
    : light(false)
    , sign(0)
    , blocked(false)
    , pos(0)
    , shift(0)  {
  (void)_alloc;
    }



   typedef uint8_t _light_type;
  _light_type light;

   typedef int32_t _sign_type;
  _sign_type sign;

   typedef uint8_t _blocked_type;
  _blocked_type blocked;

   typedef int32_t _pos_type;
  _pos_type pos;

   typedef int32_t _shift_type;
  _shift_type shift;





  typedef boost::shared_ptr< ::vision_info_msg::vision_info_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_info_msg::vision_info_msg_<ContainerAllocator> const> ConstPtr;

}; // struct vision_info_msg_

typedef ::vision_info_msg::vision_info_msg_<std::allocator<void> > vision_info_msg;

typedef boost::shared_ptr< ::vision_info_msg::vision_info_msg > vision_info_msgPtr;
typedef boost::shared_ptr< ::vision_info_msg::vision_info_msg const> vision_info_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_info_msg::vision_info_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_info_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vision_info_msg': ['/home/vadim/Projects/Autonet-2019---Team-Robosapiens/source/src/vision_info_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_info_msg::vision_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_info_msg::vision_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_info_msg::vision_info_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e53e466b1aaabe8828aeec7ac1dc68b";
  }

  static const char* value(const ::vision_info_msg::vision_info_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e53e466b1aaabe8ULL;
  static const uint64_t static_value2 = 0x828aeec7ac1dc68bULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_info_msg/vision_info_msg";
  }

  static const char* value(const ::vision_info_msg::vision_info_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool light\n\
int32 sign\n\
bool blocked\n\
int32 pos\n\
int32 shift\n\
";
  }

  static const char* value(const ::vision_info_msg::vision_info_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.light);
      stream.next(m.sign);
      stream.next(m.blocked);
      stream.next(m.pos);
      stream.next(m.shift);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vision_info_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_info_msg::vision_info_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_info_msg::vision_info_msg_<ContainerAllocator>& v)
  {
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
    s << indent << "sign: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sign);
    s << indent << "blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blocked);
    s << indent << "pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos);
    s << indent << "shift: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shift);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_INFO_MSG_MESSAGE_VISION_INFO_MSG_H
